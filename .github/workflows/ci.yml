name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GO_VERSION: "1.25"
  GORELEASER_VERSION: "v2.4.0"
  TASK_VERSION: "latest"

jobs:
  # Quality Gates
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Task
        run: curl -fsSLO https://github.com/go-task/task/releases/download/v3.42.0/task_linux_amd64.tar.gz && tar xzf task_linux_amd64.tar.gz && sudo mv task /usr/local/bin/

      - name: Run CI Quality Checks
        run: task ci-quality

  # Testing
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.25"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install Task
        run: curl -fsSLO https://github.com/go-task/task/releases/download/v3.42.0/task_linux_amd64.tar.gz && tar xzf task_linux_amd64.tar.gz && sudo mv task /usr/local/bin/

      - name: Run CI Tests
        run: task ci-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build and Release
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Task
        run: curl -fsSLO https://github.com/go-task/task/releases/download/v3.42.0/task_linux_amd64.tar.gz && tar xzf task_linux_amd64.tar.gz && sudo mv task /usr/local/bin/

      - name: Run CI Build
        run: task ci-build

  # Release
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Task
        run: curl -fsSLO https://github.com/go-task/task/releases/download/v3.42.0/task_linux_amd64.tar.gz && tar xzf task_linux_amd64.tar.gz && sudo mv task /usr/local/bin/

      - name: Clean up any uncommitted changes
        run: |
          git reset --hard HEAD
          git clean -fd

      - name: Run CI Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: task ci-release

  # Dependency review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
