name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.22"
      - run: go mod download
      - run: go test -v ./...
      - run: go vet ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Build all architectures
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=$(git rev-parse --short HEAD)

          # Build for all supported platforms
          echo "Building for Linux AMD64..."
          GOOS=linux GOARCH=amd64 go build -ldflags="-X cvewatch/pkg/version.Version=$VERSION -X cvewatch/pkg/version.BuildTime=$BUILD_TIME -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" -o cvewatch-linux-amd64 ./cmd/cvewatch

          echo "Building for Linux ARM64..."
          GOOS=linux GOARCH=arm64 go build -ldflags="-X cvewatch/pkg/version.Version=$VERSION -X cvewatch/pkg/version.BuildTime=$BUILD_TIME -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" -o cvewatch-linux-arm64 ./cmd/cvewatch

          echo "Building for macOS AMD64..."
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X cvewatch/pkg/version.Version=$VERSION -X cvewatch/pkg/version.BuildTime=$BUILD_TIME -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" -o cvewatch-darwin-amd64 ./cmd/cvewatch

          echo "Building for macOS ARM64 (Apple Silicon)..."
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X cvewatch/pkg/version.Version=$VERSION -X cvewatch/pkg/version.BuildTime=$BUILD_TIME -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" -o cvewatch-darwin-arm64 ./cmd/cvewatch

          echo "Building for Windows AMD64..."
          GOOS=windows GOARCH=amd64 go build -ldflags="-X cvewatch/pkg/version.Version=$VERSION -X cvewatch/pkg/version.BuildTime=$BUILD_TIME -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" -o cvewatch-windows-amd64.exe ./cmd/cvewatch

          echo "Building for Windows ARM64..."
          GOOS=windows GOARCH=arm64 go build -ldflags="-X cvewatch/pkg/version.Version=$VERSION -X cvewatch/pkg/version.BuildTime=$BUILD_TIME -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" -o cvewatch-windows-arm64.exe ./cmd/cvewatch

          echo "Build complete! Generated binaries:"
          ls -la cvewatch-*

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            cvewatch-linux-amd64
            cvewatch-linux-arm64
            cvewatch-darwin-amd64
            cvewatch-darwin-arm64
            cvewatch-windows-amd64.exe
            cvewatch-windows-arm64.exe
          body: |
            ## CVEWatch ${{ github.ref_name }}

            ### What's New
            - Complete Go rewrite from Python
            - NVD API v2.0 integration
            - Modern YAML-based configuration
            - Multiple output formats
            - Product-based filtering with CPE patterns
            - CVSS score filtering and severity mapping
            - Comprehensive testing and benchmarking
            - Simplified CI/CD pipeline
            - **NEW**: Full ARM64 support for Apple Silicon and ARM servers

            ### Breaking Changes
            - Configuration format changed from products.txt to YAML
            - Command-line interface completely redesigned
            - API endpoints changed from cvedetails.com to NVD
            - Python dependencies no longer required

            ### Downloads

            **Linux:**
            - AMD64: `cvewatch-linux-amd64`
            - ARM64: `cvewatch-linux-arm64`

            **macOS:**
            - Intel (AMD64): `cvewatch-darwin-amd64`
            - Apple Silicon (ARM64): `cvewatch-darwin-arm64`

            **Windows:**
            - AMD64: `cvewatch-windows-amd64.exe`
            - ARM64: `cvewatch-windows-arm64.exe`

            ### Installation

            **macOS (Apple Silicon):**
            ```bash
            curl -L -o cvewatch https://github.com/Amet13/CVEWatch/releases/latest/download/cvewatch-darwin-arm64
            chmod +x cvewatch
            sudo mv cvewatch /usr/local/bin/
            ```

            **Linux (ARM64):**
            ```bash
            curl -L -o cvewatch https://github.com/Amet13/CVEWatch/releases/latest/download/cvewatch-linux-arm64
            chmod +x cvewatch
            sudo mv cvewatch /usr/local/bin/
            ```

            ### Checksums
            SHA256 checksums for all binaries are available in the release assets.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
