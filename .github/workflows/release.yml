---
name: Release

on:
  push:
    tags: ["v*"]

jobs:
  release:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - uses: actions/setup-go@v4
        with:
          go-version: "1.25"

      - name: Setup development environment
        run: make dev-setup

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Get previous tag for changelog range
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 \
            2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" \
              --no-merges $PREVIOUS_TAG..HEAD)
          else
            echo "First release, generating changelog from all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Categorize commits
          FEATURES=$(echo "$CHANGELOG" | \
            grep -i "feat\|add\|new\|implement" || echo "")
          FIXES=$(echo "$CHANGELOG" | \
            grep -i "fix\|bug\|issue\|resolve" || echo "")
          BREAKING=$(echo "$CHANGELOG" | \
            grep -i "breaking\|major\|refactor" || echo "")
          DOCS=$(echo "$CHANGELOG" | \
            grep -i "doc\|readme\|comment" || echo "")
          CHORES=$(echo "$CHANGELOG" | \
            grep -i "chore\|clean\|update\|bump" || echo "")

          # Store categorized changelog for release body
          if [ -n "$FEATURES" ]; then
            echo "FEATURES<<EOF" >> $GITHUB_OUTPUT
            echo "## ✨ New Features" >> $GITHUB_OUTPUT
            echo "$FEATURES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          if [ -n "$FIXES" ]; then
            echo "FIXES<<EOF" >> $GITHUB_OUTPUT
            echo "## 🐛 Bug Fixes" >> $GITHUB_OUTPUT
            echo "$FIXES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          if [ -n "$BREAKING" ]; then
            echo "BREAKING<<EOF" >> $GITHUB_OUTPUT
            echo "## ⚠️ Breaking Changes" >> $GITHUB_OUTPUT
            echo "$BREAKING" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          if [ -n "$DOCS" ]; then
            echo "DOCS<<EOF" >> $GITHUB_OUTPUT
            echo "## 📚 Documentation" >> $GITHUB_OUTPUT
            echo "$DOCS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          if [ -n "$CHORES" ]; then
            echo "CHORES<<EOF" >> $GITHUB_OUTPUT
            echo "## 🔧 Maintenance" >> $GITHUB_OUTPUT
            echo "$CHORES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          # Store full changelog
          echo "FULL_CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build release binaries
        run: |
          echo "Building release binaries using Make..."
          make release
          echo "Build complete! Generated binaries:"
          ls -la cvewatch-*

      - name: Generate checksums
        run: |
          echo "Generating SHA256 checksums..."
          sha256sum cvewatch-* > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            cvewatch-linux-amd64
            cvewatch-linux-arm64
            cvewatch-darwin-amd64
            cvewatch-darwin-arm64
            cvewatch-windows-amd64.exe
            cvewatch-windows-arm64.exe
            checksums.txt
          body: |
            ## CVEWatch ${{ github.ref_name }}

            ${{ steps.changelog.outputs.FEATURES || '' }}
            ${{ steps.changelog.outputs.FIXES || '' }}
            ${{ steps.changelog.outputs.BREAKING || '' }}
            ${{ steps.changelog.outputs.DOCS || '' }}
            ${{ steps.changelog.outputs.CHORES || '' }}

            ## 📋 Full Changelog
            ${{ steps.changelog.outputs.FULL_CHANGELOG || '' }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
