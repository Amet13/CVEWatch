---
name: Release

on:
  push:
    tags: ["v*"]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - uses: actions/setup-go@v4
        with:
          go-version: "1.25"

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Get previous tag for changelog range
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 \
            2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" \
              --no-merges $PREVIOUS_TAG..HEAD)
          else
            echo "First release, generating changelog from all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Categorize commits
          FEATURES=$(echo "$CHANGELOG" | \
            grep -i "feat\|add\|new\|implement" || echo "")
          FIXES=$(echo "$CHANGELOG" | \
            grep -i "fix\|bug\|issue\|resolve" || echo "")
          BREAKING=$(echo "$CHANGELOG" | \
            grep -i "breaking\|major\|refactor" || echo "")
          DOCS=$(echo "$CHANGELOG" | \
            grep -i "doc\|readme\|comment" || echo "")
          CHORES=$(echo "$CHANGELOG" | \
            grep -i "chore\|clean\|update\|bump" || echo "")

          # Build categorized changelog
          if [ -n "$FEATURES" ]; then
            echo "## ✨ New Features" >> CHANGELOG.md
            echo "$FEATURES" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          if [ -n "$FIXES" ]; then
            echo "## 🐛 Bug Fixes" >> CHANGELOG.md
            echo "$FIXES" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          if [ -n "$BREAKING" ]; then
            echo "## ⚠️ Breaking Changes" >> CHANGELOG.md
            echo "$BREAKING" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          if [ -n "$DOCS" ]; then
            echo "## 📚 Documentation" >> CHANGELOG.md
            echo "$DOCS" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          if [ -n "$CHORES" ]; then
            echo "## 🔧 Maintenance" >> CHANGELOG.md
            echo "$CHORES" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add full changelog
          echo "## 📋 Full Changelog" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md

          # Output changelog content for release
          cat CHANGELOG.md

      - name: Build all architectures
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=$(git rev-parse --short HEAD)

          # Build for all supported platforms
          echo "Building for Linux AMD64..."
          GOOS=linux GOARCH=amd64 go build \
            -ldflags="-X cvewatch/pkg/version.Version=$VERSION \
              -X cvewatch/pkg/version.BuildTime=$BUILD_TIME \
              -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" \
            -o cvewatch-linux-amd64 \
            ./cmd/cvewatch

          echo "Building for Linux ARM64..."
          GOOS=linux GOARCH=arm64 go build \
            -ldflags="-X cvewatch/pkg/version.Version=$VERSION \
              -X cvewatch/pkg/version.BuildTime=$BUILD_TIME \
              -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" \
            -o cvewatch-linux-arm64 \
            ./cmd/cvewatch

          echo "Building for macOS AMD64..."
          GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-X cvewatch/pkg/version.Version=$VERSION \
              -X cvewatch/pkg/version.BuildTime=$BUILD_TIME \
              -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" \
            -o cvewatch-darwin-amd64 \
            ./cmd/cvewatch

          echo "Building for macOS ARM64 (Apple Silicon)..."
          GOOS=darwin GOARCH=arm64 go build \
            -ldflags="-X cvewatch/pkg/version.Version=$VERSION \
              -X cvewatch/pkg/version.BuildTime=$BUILD_TIME \
              -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" \
            -o cvewatch-darwin-arm64 \
            ./cmd/cvewatch

          echo "Building for Windows AMD64..."
          GOOS=windows GOARCH=amd64 go build \
            -ldflags="-X cvewatch/pkg/version.Version=$VERSION \
              -X cvewatch/pkg/version.BuildTime=$BUILD_TIME \
              -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" \
            -o cvewatch-windows-amd64.exe \
            ./cmd/cvewatch

          echo "Building for Windows ARM64..."
          GOOS=windows GOARCH=arm64 go build \
            -ldflags="-X cvewatch/pkg/version.Version=$VERSION \
              -X cvewatch/pkg/version.BuildTime=$BUILD_TIME \
              -X cvewatch/pkg/version.GitCommit=$GIT_COMMIT -s -w" \
            -o cvewatch-windows-arm64.exe \
            ./cmd/cvewatch

          echo "Build complete! Generated binaries:"
          ls -la cvewatch-*

      - name: Generate checksums
        run: |
          echo "Generating SHA256 checksums..."
          sha256sum cvewatch-* > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            cvewatch-linux-amd64
            cvewatch-linux-arm64
            cvewatch-darwin-amd64
            cvewatch-darwin-arm64
            cvewatch-windows-amd64.exe
            cvewatch-windows-arm64.exe
            checksums.txt
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
