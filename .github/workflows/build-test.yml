---
name: Build and Test Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  full-pipeline:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os }}-${{ matrix.go-version }}
      cancel-in-progress: true
    strategy:
      matrix:
        go-version: [1.25]
        os: [ubuntu-latest, macos-15, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Setup development environment
        shell: bash
        run: make dev-setup

      - name: Code Quality Checks
        shell: bash
        run: |
          echo "=== Code Quality Checks ==="
          echo "OS: ${{ matrix.os }}"
          echo "Go version: ${{ matrix.go-version }}"
          echo ""

          echo "Checking code formatting..."
          make check-fmt
          echo "✓ Code formatting check passed"

          echo "Running linter..."
          make lint
          echo "✓ Linting passed"

          echo "Running security scan..."
          make security-scan
          echo "✓ Security scan passed"

      - name: Run Tests
        shell: bash
        run: |
          echo "=== Running Tests ==="
          
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "Running tests on Windows..."
            make test
          else
            echo "Running tests with race detection..."
            make test-race
          fi
          echo "✓ Tests passed"

      - name: Generate Test Coverage
        shell: bash
        run: |
          echo "=== Test Coverage ==="
          make test-coverage
          echo "✓ Coverage report generated"

      - name: Build Application
        shell: bash
        run: |
          echo "=== Building Application ==="
          make clean
          make build
          ls -la cvewatch*
          echo "✓ Build completed"

      - name: Test Application Functionality
        shell: bash
        run: |
          echo "=== Application Testing ==="
          ./cvewatch version
          ./cvewatch config
          echo "✓ Application functionality verified"

      - name: Cross-Platform Build Test
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "=== Cross-Platform Build Test ==="
          echo "Testing cross-platform builds on Linux..."
          GOOS=darwin GOARCH=amd64 make build-native
          GOOS=windows GOARCH=amd64 make build-native
          ls -la cvewatch*
          echo "✓ Cross-platform builds successful"

      - name: Release Build Test
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "=== Release Build Test ==="
          echo "Testing release build process..."
          make clean
          make release
          ls -la cvewatch-*
          echo "✓ Release builds successful"

      - name: Benchmark Tests
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "=== Benchmark Tests ==="
          echo "Running benchmarks..."
          make benchmark
          echo "✓ Benchmarks completed"

      - name: Install/Uninstall Test
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "=== Install/Uninstall Test ==="
          echo "Testing install process..."
          make install
          which cvewatch
          cvewatch version
          echo "✓ Installation successful"

          echo "Testing uninstall process..."
          make uninstall
          echo "✓ Uninstallation successful"

      - name: Final Pre-commit Check
        shell: bash
        run: |
          echo "=== Final Pre-commit Check ==="
          make pre-commit
          echo "✓ All pre-commit checks passed"

      - name: Pipeline Summary
        shell: bash
        run: |
          echo "=== Pipeline Summary ==="
          echo "✅ All checks passed successfully!"
          echo "✅ Code quality verified"
          echo "✅ Tests executed"
          echo "✅ Builds completed"
          echo "✅ Application functional"
          echo "✅ Ready for production"

      - name: Upload build artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ matrix.go-version }}
          path: cvewatch-*
          retention-days: 30

      - name: Upload single binary
        if: matrix.os != 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cvewatch-${{ matrix.os }}-${{ matrix.go-version }}
          path: cvewatch*
          retention-days: 7
