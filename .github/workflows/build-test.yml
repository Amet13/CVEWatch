---
name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.25]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: "false"

  build-matrix:
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            artifact: cvewatch-linux-amd64
          - os: linux
            arch: arm64
            artifact: cvewatch-linux-arm64
          - os: darwin
            arch: amd64
            artifact: cvewatch-darwin-amd64
          - os: darwin
            arch: arm64
            artifact: cvewatch-darwin-arm64
          - os: windows
            arch: amd64
            artifact: cvewatch-windows-amd64.exe
          - os: windows
            arch: arm64
            artifact: cvewatch-windows-arm64.exe
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.25"

      - name: Build ${{ matrix.artifact }}
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -ldflags="-X cvewatch/pkg/version.Version=dev -s -w" \
            -o ${{ matrix.artifact }} \
            ./cmd/cvewatch

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}
          retention-days: 1

  lint:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.25"

      - name: Install golangci-lint
        run: |
          go install \
            github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run linter
        run: golangci-lint run

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not properly formatted. Run 'make format' to fix."
            exit 1
          fi
