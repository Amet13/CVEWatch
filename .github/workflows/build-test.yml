---
name: Build and Test Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  full-pipeline:
    strategy:
      matrix:
        go-version: [1.25]
        os: [ubuntu-latest, macos-15, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Setup development environment
        run: make dev-setup

      - name: Run complete pipeline
        run: |
          echo "=== Starting CVEWatch Full Pipeline ==="
          echo "OS: ${{ matrix.os }}"
          echo "Go version: ${{ matrix.go-version }}"
          echo ""

          echo "=== 1. Code Quality Checks ==="
          make check-fmt
          make lint
          make security-scan
          echo "✓ Code quality checks passed"
          echo ""

          echo "=== 2. Testing ==="
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            make test
          else
            make test-race
          fi
          echo "✓ Tests passed"
          echo ""

          echo "=== 3. Test Coverage ==="
          make test-coverage
          echo "✓ Coverage report generated"
          echo ""

          echo "=== 4. Build Process ==="
          make clean
          make build
          ls -la cvewatch*
          echo "✓ Build completed"
          echo ""

          echo "=== 5. Application Testing ==="
          ./cvewatch version
          ./cvewatch config
          echo "✓ Application functionality verified"
          echo ""

          echo "=== 6. Cross-Platform Build Test ==="
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "Testing cross-platform builds on Linux..."
            GOOS=darwin GOARCH=amd64 make build-native
            GOOS=windows GOARCH=amd64 make build-native
            ls -la cvewatch*
            echo "✓ Cross-platform builds successful"
          fi
          echo ""

          echo "=== 7. Release Build Test ==="
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "Testing release build process..."
            make clean
            make release
            ls -la cvewatch-*
            echo "✓ Release builds successful"
          fi
          echo ""

          echo "=== 8. Benchmark Tests ==="
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "Running benchmarks..."
            make benchmark
            echo "✓ Benchmarks completed"
          fi
          echo ""

          echo "=== 9. Install/Uninstall Test ==="
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "Testing install process..."
            make install
            which cvewatch
            cvewatch version
            echo "✓ Installation successful"
            
            echo "Testing uninstall process..."
            make uninstall
            echo "✓ Uninstallation successful"
          fi
          echo ""

          echo "=== 10. Pre-commit Checks ==="
          make pre-commit
          echo "✓ All pre-commit checks passed"
          echo ""

          echo "=== Pipeline Summary ==="
          echo "✅ All checks passed successfully!"
          echo "✅ Code quality verified"
          echo "✅ Tests executed"
          echo "✅ Builds completed"
          echo "✅ Application functional"
          echo "✅ Ready for production"

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: "false"

      - name: Upload build artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ matrix.go-version }}
          path: cvewatch-*
          retention-days: 30

      - name: Upload single binary
        if: matrix.os != 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cvewatch-${{ matrix.os }}-${{ matrix.go-version }}
          path: cvewatch*
          retention-days: 7
